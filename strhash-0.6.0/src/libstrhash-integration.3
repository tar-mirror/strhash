.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jul 31 12:06:26 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "integration 3"
.TH integration 3 "0.6.0" "2003-07-31" "strhash"
.UC
.SH "NAME"
strhash-integration \- how to integrate strhash into your projects
.SH "DATA TYPES"
.IX Header "DATA TYPES"
.Sh "uint32"
.IX Subsection "uint32"
is a 32bit unsigned integer type. On many systems you can use:
.PP
.Vb 2
\&  #include <inttypes.h>
\&  #define uint32 uint32_t
.Ve
to get a definition. This is still somewhat unportable, unfortunately.
Do not use unsigned int or unsigned long carelessly.
.SH "INTEGRATION"
.IX Header "INTEGRATION"
.Sh "Header files"
.IX Subsection "Header files"
strhash.h includes uint32.h, which is expected to define the uint32
type. The uint32.h provided with the library source may be used together
with \s-1GNU\s0 autoconf.
.PP
strhash_io.h provides prototypes for strhash_load and strhash_save.
.PP
I used the following invocation of autoconf magic for it, back when i
used autoconf:
.PP
.Vb 8
\&        AC_CHECK_SIZEOF(unsigned short,2)
\&        AC_CHECK_SIZEOF(short,2)
\&        AC_CHECK_SIZEOF(int,4)
\&        AC_CHECK_SIZEOF(unsigned int,4)
\&        AC_CHECK_SIZEOF(long,4)
\&        AC_CHECK_SIZEOF(unsigned long,4)
\&        AC_CHECK_SIZEOF(long long,0)
\&        AC_CHECK_SIZEOF(unsigned long long,0)
.Ve
If \f(CW\*(C`HAVE_CONFIG_H\*(C'\fR is not defined then \fBauto-typesize.h\fR has to
define the following C macros, possibly to other values:
.PP
.Vb 8
\&        #define SIZEOF_SHORT 2
\&        #define SIZEOF_INT 4
\&        #define SIZEOF_LONG 4
\&        #define SIZEOF_UNSIGNED_SHORT 2
\&        #define SIZEOF_UNSIGNED_INT 4
\&        #define SIZEOF_UNSIGNED_LONG 4
\&        #define SIZEOF_LONG_LONG 8
\&        #define SIZEOF_UNSIGNED_LONG_LONG 8
.Ve
If \f(CW\*(C`HAVE_CONFIG_H\*(C'\fR is defined then \fBconfig.h\fR has to be included before
uint32.h.
.Sh "Source files"
.IX Subsection "Source files"
Each strhash function of non-trivial size comes in an own source file.
All files include another header besides \*(L"strhash.h\*(R": "\fIstrhashi.h\fR",
which defines some internally used macros and functions.
.PP
You only need to include those function you really use \- with the
exception of \fBstrhash_get\fR, which is used by \fBstrhash_lookup*\fR
and \fBstrhash_walk*\fR functions.
.Ip "strhash_chng.c" 8
.IX Item "strhash_chng.c"
contains \fBstrhash_change\fR.
.Ip "strhash_crea.c" 8
.IX Item "strhash_crea.c"
contains \fBstrhash_create\fR.
.Ip "strhash_del.c" 8
.IX Item "strhash_del.c"
contains \fBstrhash_delete\fR.
.Ip "strhash_dest.c" 8
.IX Item "strhash_dest.c"
contains \fBstrhash_destroy\fR.
.Ip "strhash_ente.c" 8
.IX Item "strhash_ente.c"
contains \fBstrhash_enter\fR.
.Ip "strhash_get.c" 8
.IX Item "strhash_get.c"
contains \fBstrhash_get\fR, a function used by strhash_look.c and strhash_walk.c.
.Ip "strhash_hash.c" 8
.IX Item "strhash_hash.c"
contains \fBstrhash_hash\fR.
.Ip "strhash_look.c" 8
.IX Item "strhash_look.c"
contains \fBstrhash_lookupstart\fR, \fBstrhash_lookupnext\fR and \fBstrhash_lookup\fR.
.Ip "strhash_walk.c" 8
.IX Item "strhash_walk.c"
contains \fBstrhash_walkstart\fR and \fBstrhash_walk\fR.
.Ip "strhash_load.c" 8
.IX Item "strhash_load.c"
contains \fBstrhash_load\fR. Note that \fBstrhash_load\fR depends on the buffer,
stralloc and byte interfaces and is not useful without them.
.Ip "strhash_save.c" 8
.IX Item "strhash_save.c"
contains \fBstrhash_save\fR. Note that \fBstrhash_save\fR depends on the buffer,
stralloc and byte interfaces and is not useful without them.
.SH "DJB STYLE LIBRARIES"
.IX Header "DJB STYLE LIBRARIES"
If you choose to not use the standard C library functions then you may
define the \f(CW\*(C`DJBLIBS\*(C'\fR symbol before compiling the library files. This
will make the library use \fIalloc\fR, \fIalloc_free\fR and \fIbyte_copy\fR
instead of \fImalloc\fR, \fIfree\fR and \fImemcpy\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The\ strhash\ library\ interface:\ \fIlibstrhash\fR\,
