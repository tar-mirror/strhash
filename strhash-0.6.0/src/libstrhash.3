.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jul 31 12:06:27 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "libstrhash 3"
.TH libstrhash 3 "0.6.0" "2003-07-31" "strhash"
.UC
.SH "NAME"
strhash \- hash table library using strings as keys
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
#include \*(L"strhash.h\*(R"
.PP
int \fBstrhash_create\fR(strhash *table, unsigned int mod, 
unsigned int startsize, strhash_hashfunc);
.PP
void \fBstrhash_destroy\fR(strhash *table);
.PP
uint32 \fBstrhash_hash\fR(const char *key, unsigned int len);
.PP
int \fBstrhash_enter\fR (strhash *table,
int keyalloc, const char *key, uint32 keylen,
int dataalloc, const char *data, uint32 datalen);
.PP
void \fBstrhash_lookupstart\fR(strhash *table);
.PP
int \fBstrhash_lookupnext\fR(strhash *table,
const char *key, uint32 keylen,
char **data, uint32 *datalen);
.PP
int \fBstrhash_lookup\fR(strhash *table,
const char *key, uint32 keylen,
char **data, uint32 *datalen);
.PP
void \fBstrhash_delete\fR(strhash *table);
.PP
int \fBstrhash_change\fR(strhash *table,
int dataalloc, const char *data, uint32 datalen);
.PP
void \fBstrhash_walkstart\fR(strhash *table);
.PP
int \fBstrhash_walk\fR(strhash *table, 
char **key, uint32 *keylen,
char **data, uint32 *datalen);
.PP
#include \*(L"strhash_io.h\*(R"
.PP
int \fBstrhash_load\fR(strhash *table, buffer *b);
.PP
int \fBstrhash_save\fR(strhash *table, buffer *b);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A strhash is an associative array, mapping keys to values. Keys and values 
may be strings of up to 2 gigabytes (2^31) bytes of length, containing
any possibly character. Keys need not be unique.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Ip "\fBstrhash_create\fR" 8
.IX Item "strhash_create"
creates a hash table. \fImod\fR is the table split
to use. \fIstartsize\fR is the starting size of a second level table. 
\&\fIhashfunc\fR is a hashing function.
.Sp
\&\fBstrhash_create\fR returns \-1 in case of an error. 
.Ip "\fBstrhash_destroy\fR" 8
.IX Item "strhash_destroy"
destroys a hash table, freeing all memory
used by it. The \fItable\fR must not be used for further lookups, but may
be used as argument to \fBstrhash_create\fR to create a new table.
\&\fIstartsize\fR is the starting slot size. \fIhashfunc\fR is a hashing
function.
.Ip "\fBstrhash_hash\fR" 8
.IX Item "strhash_hash"
is a hash function. It's neither very good nor very bad, but is quite fast.
\&\s-1CRC\s0 based algorithms usually give a better key distribution.
.Sp
Note: The \fBstrhash\fR library uses the modulus of the \fIhash\fR and 
the table split factor (in C terms: hash%mod) to select a second level
table, and uses the remainder of the hash (hash / mod) modulus the
second level size as a index into the second level table.
.Ip "\fBstrhash_enter\fR" 8
.IX Item "strhash_enter"
enters data into the table \fItable\fR. 
The key is described by \fIkey\fR and \fIkeylen\fR, the value by \fIdata\fR
and \fIdatalen\fR. 
.Sp
If \fIkeyalloc\fR is set then \fBstrhash_enter\fR creates a copy of the
key, otherwise \fBstrhash_enter\fR creates a reference to the key.
\&\fIkey\fR and \fIkeylen\fR may be \s-1NULL\s0 respectively 0 if \fIkeyalloc\fR
is not set (0).
.Sp
If \fIdataalloc\fR is set then \fBstrhash_enter\fR creates a copy of the
value, otherwise \fBstrhash_enter\fR creates a reference to the value.
\&\fIdata\fR and \fIdatalen\fR may be \s-1NULL\s0 respectively 0 if \fIdataalloc\fR
is not set (0).
.Sp
\&\fBstrhash_enter\fR returns \-1 in case of trouble, setting \fIerrno\fR
appropriately. \fI\s-1ENOENT\s0\fR means that either \fIdatalen\fR or \fIkeylen\fR
exceeded 31 bits. \fI\s-1ENOMEM\s0\fR means that strhash_enter ran out of
memory.
.Sp
\&\fBstrhash_enter\fR returns 1 if can enter the new key.
.Ip "\fBstrhash_lookupstart\fR" 8
.IX Item "strhash_lookupstart"
starts a new search.
.Ip "\fBstrhash_lookupnext\fR" 8
.IX Item "strhash_lookupnext"
looks for the next record with key \fBkey\fR and \fBkeylen\fR in the table.
It returns 1 if it finds the record; otherwise it returns 0. 
All calls to \fBstrhash_lookupnext\fR must use the same \fBkey\fR and \fBkeylen\fR
as the first call after \fBstrhash_lookupstart\fR.
.Sp
After \fBstrhash_lookupnext\fR returned 0 no further lookup may be done
without first calling \fBstrhash_lookupstart\fR.
.Sp
If \fBdata\fR is not a \s-1NULL\s0 pointer then \fBstrhash_lookupnext\fR will put
a pointer to the value into \fB*data\fR. If \fBdatalen\fR is not a \s-1NULL\s0
pointer then \fBstrhash_lookupnext\fR will put a pointer to the values
length into \fB*datalen\fR.
.Ip "\fBstrhash_lookup\fR" 8
.IX Item "strhash_lookup"
first calls \fBstrhash_lookupstart\fR and then calls \fBstrhash_lookupnext\fR.
.Ip "\fBstrhash_delete\fR" 8
.IX Item "strhash_delete"
deletes the record found by the last \fBstrhash_lookupnext\fR operation.
.Ip "\fBstrhash_change\fR" 8
.IX Item "strhash_change"
changes the value of the record found by the last \fBstrhash_lookupnext\fR
operation. It will create a copy of \fIdata\fR if \fIdataalloc\fR is set,
or store a reference to \fIdata\fR otherwise.
.Ip "\fBstrhash_walkstart\fR" 8
.IX Item "strhash_walkstart"
starts an operation to walk through the table.
.Ip "\fBstrhash_walk\fR" 8
.IX Item "strhash_walk"
walks through the table, returning for every record in it.
It returns 1 if a record is found, and 0 otherwise.
.Sp
If 1 is returned then pointers to and length of key and
value of the record are stored in the appropriate parameter, 
provided it's not a \s-1NULL\s0 pointer.
.Ip "\fBstrhash_load\fR" 8
.IX Item "strhash_load"
appends the content of the buffer to the hash. In case of
trouble it sets \fIerrno\fR and returns \-1. \fI\s-1EPROTO\s0\fR means that the buffers
content was badly formatted.
.Ip "\fBstrhash_save\fR" 8
.IX Item "strhash_save"
saves the content of the hash to the buffer. In case of
trouble it sets \fIerrno\fR and returns \-1.
.SH "LAYOUT"
.IX Header "LAYOUT"
The top level hash table contains \fImod\fR slots (where \fImod\fR is 
an argument given to the \fBstrhash_create\fR function). Each slot
points to a second level table or to \s-1NULL\s0 if the second level
table is still empty (unused). 
.PP
Each second level table is allocated as soon as it is needed. It
holds a number of pointers to \fBentries\fR. The library grows the
second level tables so that they are never more than 50% of the
pointers in use. The library doesn't reduce the size of a second
level table.
.PP
Each \fBentry\fR holds the hash of the key, a pointer to the data,
then length of the data, the length of the key and either the
key or a pointer to a key.
.SH "MEMORY USAGE"
.IX Header "MEMORY USAGE"
In short: quite high. On a system where pointers a 32 bits long
each record eats 20 bytes for the entry, between 8 and 12 bytes 
for the second level table, plus the size of the key and the value. 
.PP
For short keys or data of less then a pointer size length the
memory needed is somewhat lower.
.PP
Additional memory is used during table splits.
.PP
Note: the malloc implementation in the C standard library may
waste additional memory.
.SH "LIMITS"
.IX Header "LIMITS"
.Ip "keys are limited to 31 bits of length." 8
.IX Item "keys are limited to 31 bits of length."
.PD 0
.Ip "values are limited to 31 bits of length." 8
.IX Item "values are limited to 31 bits of length."
.Ip "the order of records is not preserved." 8
.IX Item "the order of records is not preserved."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Integration\ \-\ how\ to\ integrate\ strhash\ into\ your\ projects:\ \fIstrhash-integration\fR\.
